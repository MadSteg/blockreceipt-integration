import 'dotenv/config';
import express from 'express';
import crypto from 'crypto';
import { Storage } from '@google-cloud/storage';
import { ethers, BigNumber } from 'ethers';

const RPC              = process.env.POLYGON_MAINNET_RPC_URL;
const PK               = process.env.BLOCKCHAIN_PRIVATE_KEY;
const NFT_ADDR         = process.env.NFT_CONTRACT_ADDRESS;
const GCS_PROJECT_ID   = process.env.GCS_PROJECT_ID;
const BUCKET           = process.env.GCS_BUCKET;
const API_KEY          = process.env.WEBHOOK_API_KEY;
const RECEIPT_AES_KEY  = process.env.RECEIPT_AES_KEY || null;

if (!RPC || !PK || !NFT_ADDR || !GCS_PROJECT_ID || !BUCKET || !API_KEY) {
  console.error('Missing required envs. Check RPC/PK/NFT_ADDR/GCS_PROJECT_ID/GCS_BUCKET/WEBHOOK_API_KEY');
  process.exit(1);
}

const app = express();
app.use(express.json({ limit: '1mb' }));

const storage = new Storage();
const bucket = storage.bucket(BUCKET);
(async () => {
  
    const testPath = "tmp/server-startup-healthcheck.txt";
    const file = bucket.file(testPath);
    await file.save(JSON.stringify(meta, null, 2), {
  contentType: "application/json",
  resumable: false,
  
  ifGenerationMatch: 0
});
console.log("[gcs] write ok ->", path);
);
  throw e;
}const metaUrl = `https://storage.googleapis.com/${BUCKET}/${path}`;

    const provider = new ethers.providers.JsonRpcProvider(RPC, { chainId:137, name:'polygon' });
    const signer   = new ethers.Wallet(PK, provider);
    const abi = ['function mint(address to, uint256 id, uint256 amount, bytes data) external'];
    const nft = new ethers.Contract(NFT_ADDR, abi, signer);

    const fd  = await provider.getFeeData();
    const tip = BigNumber.from(fd.maxPriorityFeePerGas || gwei(2)).lt(gwei(40)) ? gwei(40) : (fd.maxPriorityFeePerGas || gwei(40));
    const max = BigNumber.from(fd.maxFeePerGas || (await provider.getGasPrice())).mul(2).add(tip);

    const tx = await nft.mint(to, tokenId, 1, '0x', {
      gasLimit: 220000,
      maxPriorityFeePerGas: tip,
      maxFeePerGas: max
    });
    const r  = await tx.wait();

    res.json({
      ok: true,
      tokenId,
      to,
      merchantName,
      metadata: metaUrl,
      image: imageUrl,
      txHash: tx.hash,
      blockNumber: r.blockNumber
    });
  });
  }
});

const PORT = process.env.PORT || 3000;
(async()=>{const f=bucket.file("tmp/server-startup-healthcheck.txt");await f.save("ok "+Date.now(),{resumable:false,ifGenerationMatch:0,contentType:"text/plain"});console.log("[gcs] startup write ok"););}})();
app.listen(PORT, () => console.log(`POS webhook listening on :${PORT}`));
